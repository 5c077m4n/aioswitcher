---
name: Build

on:
  pull_request:
    branch: dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7]
    name: Build project with Python ${{ matrix.python }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.0.0

      - name: Cache pip repository
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-pip-

      - name: Cache poetry repository
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-poetry-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v1.2.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip poetry==0.12.16
          poetry config virtualenvs.create false
          poetry install --no-dev -n -vv -E "coverage" -E "docslint" -E "docsbuild" -E "checkers" -E "unittests"
          yamllint --config-file .yamllint --format colored --strict .

      - name: Lint yaml files
        run: |
          python --version
          poetry --version
          poetry config --list
          yamllint --config-file .yamllint --format colored --strict .

      - name: Lint rst files
        run: doc8 --allow-long-titles --max-line-length 100 -e rst docs/source

      - name: Temp build documantation site
        run: |
          mkdir sphinxtemp
          sphinx-build -W -b html -d sphinxtemp/doctrees docs/source sphinxtemp/html
          rm -r sphinxtemp

      - name: Security check code with bandit
        run: bandit -rvc .bandit src/ tests/ docs/source/ -l -ii

      - name: Validate imports with isort
        run: isort -vv --check-only --recursive src/ tests/ docs/source/

      - name: Lint code with flake8
        run: flake8 --statistics --count --doctests src/ tests/ docs/source/

      - name: Check code style with black
        run: black --check src/ tests/ docs/source/

      - name: Check static typing with mypy
        run: mypy --follow-imports silent --ignore-missing-imports src/ tests/ docs/source/

      - name: Perform unit tests with coverage report
        run: pytest -vs --cov --cov-config=.coveragerc --cov-report=xml:coverage_report/coverage.xml

      - name: Push coverage report to CodeCov
        uses: codecov/codecov-action@v1.0.6
        with:
          file: ./coverage_report/coverage.xml

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: coverage-report
          path: ./coverage_report/coverage.xml
