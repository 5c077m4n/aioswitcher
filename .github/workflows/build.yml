---
name: Build

on:
  pull_request:
    branch: master

jobs:

  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.7' ]
    name: Verify project with Python ${{ matrix.python }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.0.0

      - name: Cache pip repository
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}-${{ matrix.python }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache poetry repository
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v1.2.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          sudo echo "Australia/Melbourne" > /etc/timezone
          sudo dpkg-reconfigure -f noninteractive tzdata
          pip install --upgrade pip poetry
          poetry config virtualenvs.create false --local
          poetry install -v -E "coverage" -E "docslint" -E "docsbuild" -E "python-checkers" -E "unittests"

      - name: Lint yaml files
        run: yamllint --config-file .yamllint --format colored --strict .

      - name: Lint rst files
        run: doc8 --allow-long-titles --max-line-length 100 -e rst docs/source

      - name: Spellcheck rst files
        run: |
          RST_FILES=$(find "$(pwd)/docs/source" -type f -name "*.rst")
          scspell --report-only --use-builtin-base-dict --override-dictionary .spelling $RST_FILES

      - name: Temp build documantation site
        run: |
          mkdir sphinxtemp
          sphinx-build -W -b html -d sphinxtemp/doctrees docs/source sphinxtemp/html
          rm -r sphinxtemp

      - name: Security check code with bandit
        run: bandit -rvc .bandit src/ tests/ docs/source/ -l -ii

      - name: Validate imports with isort
        run: isort --check-only --recursive src/ tests/ docs/source/

      - name: Lint code with flake8
        run: flake8 --statistics --count --doctests src/ tests/ docs/source/

      - name: Check code style with black
        run: black --check src/ tests/ docs/source/

      - name: Check static typing with mypy
        run: mypy --follow-imports silent --ignore-missing-imports src/ tests/ docs/source/

      - name: Perform unit tests with coverage report
        run: pytest -vs --cov --cov-config=.coveragerc --cov-report=xml:coverage_report/coverage.xml
